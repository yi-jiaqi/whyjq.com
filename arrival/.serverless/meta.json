{
  "/Users/jiaqiyi/Documents/Document-ations/Arrival(Talking to the Alien)/final": {
    "versionSfCore": null,
    "versionFramework": "4.1.16",
    "isWithinCompose": false,
    "isCompose": false,
    "composeOrgName": null,
    "composeResolverProviders": {},
    "composeServiceName": null,
    "servicePath": "/Users/jiaqiyi/Documents/Document-ations/Arrival(Talking to the Alien)/final",
    "serviceConfigFileName": "serverless.yml",
    "service": {
      "org": "whyjq",
      "app": "arrival",
      "service": "chatgpt-api",
      "provider": {
        "name": "aws",
        "runtime": "nodejs16.x",
        "region": "us-east-1",
        "environment": {
          "OPENAI_API_KEY": "<REDACTED>",
          "THE_PREFIX": "Now perfrom as an alien. You are going to receive a message, and I need you to reply to the message in one single sentence, acting like you are first to the Earth. Here is the MESSAGE:",
          "THE_SUFFIX": "The MESSAGE is shown as before. Your answer should be super short and mysterous. You must not disclose that you are anyhow related to any entity in human society. You must not say anything related to duties of chatbots. You must not cite the massage directly."
        },
        "iam": {
          "role": "arn:aws:iam::339712860018:role/service-role/ChatGPTProxy-role-4s3qtkll"
        },
        "stage": "dev",
        "versionFunctions": true,
        "compiledCloudFormationTemplate": {
          "AWSTemplateFormatVersion": "2010-09-09",
          "Description": "The AWS CloudFormation template for this Serverless application",
          "Resources": {
            "ServerlessDeploymentBucket": {
              "Type": "AWS::S3::Bucket",
              "Properties": {
                "BucketEncryption": {
                  "ServerSideEncryptionConfiguration": [
                    {
                      "ServerSideEncryptionByDefault": {
                        "SSEAlgorithm": "AES256"
                      }
                    }
                  ]
                }
              }
            },
            "ServerlessDeploymentBucketPolicy": {
              "Type": "AWS::S3::BucketPolicy",
              "Properties": {
                "Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "PolicyDocument": {
                  "Statement": [
                    {
                      "Action": "s3:*",
                      "Effect": "Deny",
                      "Principal": "*",
                      "Resource": [
                        {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":s3:::",
                              {
                                "Ref": "ServerlessDeploymentBucket"
                              },
                              "/*"
                            ]
                          ]
                        },
                        {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":s3:::",
                              {
                                "Ref": "ServerlessDeploymentBucket"
                              }
                            ]
                          ]
                        }
                      ],
                      "Condition": {
                        "Bool": {
                          "aws:SecureTransport": false
                        }
                      }
                    }
                  ]
                }
              }
            },
            "AppLogGroup": {
              "Type": "AWS::Logs::LogGroup",
              "Properties": {
                "LogGroupName": "/aws/lambda/chatgpt-api-dev-app"
              }
            },
            "AppLambdaFunction": {
              "Type": "AWS::Lambda::Function",
              "Properties": {
                "Code": {
                  "S3Bucket": {
                    "Ref": "ServerlessDeploymentBucket"
                  },
                  "S3Key": "serverless/chatgpt-api/dev/1722251965270-2024-07-29T11:19:25.270Z/chatgpt-api.zip"
                },
                "Handler": "index.handler",
                "Runtime": "nodejs16.x",
                "FunctionName": "chatgpt-api-dev-app",
                "MemorySize": 1024,
                "Timeout": 6,
                "Environment": {
                  "Variables": {
                    "OPENAI_API_KEY": "<REDACTED>",
                    "THE_PREFIX": "Now perfrom as an alien. You are going to receive a message, and I need you to reply to the message in one single sentence, acting like you are first to the Earth. Here is the MESSAGE:",
                    "THE_SUFFIX": "The MESSAGE is shown as before. Your answer should be super short and mysterous. You must not disclose that you are anyhow related to any entity in human society. You must not say anything related to duties of chatbots. You must not cite the massage directly."
                  }
                },
                "Role": "arn:aws:iam::339712860018:role/service-role/ChatGPTProxy-role-4s3qtkll"
              },
              "DependsOn": [
                "AppLogGroup"
              ]
            },
            "AppLambdaVersionEaJR97PKlqeiIewmFzQl5KxU4xr7lrmKcNtYk2UOg": {
              "Type": "AWS::Lambda::Version",
              "DeletionPolicy": "Retain",
              "Properties": {
                "FunctionName": {
                  "Ref": "AppLambdaFunction"
                },
                "CodeSha256": "Yk4rcdH/GDYdJoUibbkPWfpCJ5Gev38YQooo4EV66Qc="
              }
            },
            "ApiGatewayRestApi": {
              "Type": "AWS::ApiGateway::RestApi",
              "Properties": {
                "Name": "dev-chatgpt-api",
                "EndpointConfiguration": {
                  "Types": [
                    "EDGE"
                  ]
                },
                "Policy": ""
              }
            },
            "ApiGatewayResourceChatgpt": {
              "Type": "AWS::ApiGateway::Resource",
              "Properties": {
                "ParentId": {
                  "Fn::GetAtt": [
                    "ApiGatewayRestApi",
                    "RootResourceId"
                  ]
                },
                "PathPart": "chatgpt",
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodChatgptOptions": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "AuthorizationType": "NONE",
                "HttpMethod": "OPTIONS",
                "MethodResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": true,
                      "method.response.header.Access-Control-Allow-Headers": true,
                      "method.response.header.Access-Control-Allow-Methods": true
                    },
                    "ResponseModels": {}
                  }
                ],
                "RequestParameters": {},
                "Integration": {
                  "Type": "MOCK",
                  "RequestTemplates": {
                    "application/json": "{statusCode:200}"
                  },
                  "ContentHandling": "CONVERT_TO_TEXT",
                  "IntegrationResponses": [
                    {
                      "StatusCode": "200",
                      "ResponseParameters": {
                        "method.response.header.Access-Control-Allow-Origin": "'*'",
                        "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                        "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                      },
                      "ResponseTemplates": {
                        "application/json": ""
                      }
                    }
                  ]
                },
                "ResourceId": {
                  "Ref": "ApiGatewayResourceChatgpt"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                }
              }
            },
            "ApiGatewayMethodChatgptPost": {
              "Type": "AWS::ApiGateway::Method",
              "Properties": {
                "HttpMethod": "POST",
                "RequestParameters": {},
                "ResourceId": {
                  "Ref": "ApiGatewayResourceChatgpt"
                },
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "ApiKeyRequired": "<REDACTED>",
                "AuthorizationType": "NONE",
                "Integration": {
                  "IntegrationHttpMethod": "POST",
                  "Type": "AWS_PROXY",
                  "Uri": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:",
                        {
                          "Ref": "AWS::Partition"
                        },
                        ":apigateway:",
                        {
                          "Ref": "AWS::Region"
                        },
                        ":lambda:path/2015-03-31/functions/",
                        {
                          "Fn::GetAtt": [
                            "AppLambdaFunction",
                            "Arn"
                          ]
                        },
                        "/invocations"
                      ]
                    ]
                  }
                },
                "MethodResponses": []
              },
              "DependsOn": [
                "AppLambdaPermissionApiGateway"
              ]
            },
            "ApiGatewayDeployment1722251964488": {
              "Type": "AWS::ApiGateway::Deployment",
              "Properties": {
                "RestApiId": {
                  "Ref": "ApiGatewayRestApi"
                },
                "StageName": "dev"
              },
              "DependsOn": [
                "ApiGatewayMethodChatgptOptions",
                "ApiGatewayMethodChatgptPost"
              ]
            },
            "AppLambdaPermissionApiGateway": {
              "Type": "AWS::Lambda::Permission",
              "Properties": {
                "FunctionName": {
                  "Fn::GetAtt": [
                    "AppLambdaFunction",
                    "Arn"
                  ]
                },
                "Action": "lambda:InvokeFunction",
                "Principal": "apigateway.amazonaws.com",
                "SourceArn": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":execute-api:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":",
                      {
                        "Ref": "AWS::AccountId"
                      },
                      ":",
                      {
                        "Ref": "ApiGatewayRestApi"
                      },
                      "/*/*"
                    ]
                  ]
                }
              }
            }
          },
          "Outputs": {
            "ServerlessDeploymentBucketName": {
              "Value": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "Export": {
                "Name": "sls-chatgpt-api-dev-ServerlessDeploymentBucketName"
              }
            },
            "AppLambdaFunctionQualifiedArn": {
              "Description": "Current Lambda function version",
              "Value": {
                "Ref": "AppLambdaVersionEaJR97PKlqeiIewmFzQl5KxU4xr7lrmKcNtYk2UOg"
              },
              "Export": {
                "Name": "sls-chatgpt-api-dev-AppLambdaFunctionQualifiedArn"
              }
            },
            "ServiceEndpoint": {
              "Description": "URL of the service endpoint",
              "Value": {
                "Fn::Join": [
                  "",
                  [
                    "https://",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    ".execute-api.",
                    {
                      "Ref": "AWS::Region"
                    },
                    ".",
                    {
                      "Ref": "AWS::URLSuffix"
                    },
                    "/dev"
                  ]
                ]
              },
              "Export": {
                "Name": "sls-chatgpt-api-dev-ServiceEndpoint"
              }
            }
          }
        },
        "coreCloudFormationTemplate": {
          "AWSTemplateFormatVersion": "2010-09-09",
          "Description": "The AWS CloudFormation template for this Serverless application",
          "Resources": {
            "ServerlessDeploymentBucket": {
              "Type": "AWS::S3::Bucket",
              "Properties": {
                "BucketEncryption": {
                  "ServerSideEncryptionConfiguration": [
                    {
                      "ServerSideEncryptionByDefault": {
                        "SSEAlgorithm": "AES256"
                      }
                    }
                  ]
                }
              }
            },
            "ServerlessDeploymentBucketPolicy": {
              "Type": "AWS::S3::BucketPolicy",
              "Properties": {
                "Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "PolicyDocument": {
                  "Statement": [
                    {
                      "Action": "s3:*",
                      "Effect": "Deny",
                      "Principal": "*",
                      "Resource": [
                        {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":s3:::",
                              {
                                "Ref": "ServerlessDeploymentBucket"
                              },
                              "/*"
                            ]
                          ]
                        },
                        {
                          "Fn::Join": [
                            "",
                            [
                              "arn:",
                              {
                                "Ref": "AWS::Partition"
                              },
                              ":s3:::",
                              {
                                "Ref": "ServerlessDeploymentBucket"
                              }
                            ]
                          ]
                        }
                      ],
                      "Condition": {
                        "Bool": {
                          "aws:SecureTransport": false
                        }
                      }
                    }
                  ]
                }
              }
            }
          },
          "Outputs": {
            "ServerlessDeploymentBucketName": {
              "Value": {
                "Ref": "ServerlessDeploymentBucket"
              }
            }
          }
        },
        "vpc": {}
      },
      "functions": {
        "app": {
          "handler": "index.handler",
          "events": [
            {
              "http": {
                "path": "chatgpt",
                "method": "post",
                "cors": {
                  "origin": "*",
                  "methods": [
                    "OPTIONS",
                    "POST"
                  ],
                  "headers": [
                    "Content-Type",
                    "X-Amz-Date",
                    "Authorization",
                    "X-Api-Key",
                    "X-Amz-Security-Token",
                    "X-Amz-User-Agent",
                    "X-Amzn-Trace-Id"
                  ],
                  "allowCredentials": "<REDACTED>"
                },
                "integration": "AWS_PROXY"
              }
            }
          ],
          "name": "chatgpt-api-dev-app",
          "package": {},
          "memory": 1024,
          "timeout": 6,
          "runtime": "nodejs16.x",
          "vpc": {},
          "versionLogicalId": "AppLambdaVersionEaJR97PKlqeiIewmFzQl5KxU4xr7lrmKcNtYk2UOg"
        }
      }
    },
    "serviceRawFile": "# \"org\" ensures this Service is used with the correct Serverless Framework Access Key.\norg: whyjq\n# \"app\" enables Serverless Framework Dashboard features and sharing them with other Services.\napp: arrival\nservice: chatgpt-api\n\nprovider:\n  name: aws\n  runtime: nodejs16.x\n  region: us-east-1\n  environment:\n    OPENAI_API_KEY: sk-proj-YXU59aQluxW5Bu2bcPtNT3BlbkFJ5voVzk9O3ZZfY7lFFTzS\n    THE_PREFIX: \"Now perfrom as an alien. You are going to receive a message, and I need you to reply to the message in one single sentence, acting like you are first to the Earth. Here is the MESSAGE:\"\n    THE_SUFFIX: \"The MESSAGE is shown as before. Your answer should be super short and mysterous. You must not disclose that you are anyhow related to any entity in human society. You must not say anything related to duties of chatbots. You must not cite the massage directly.\"\n  iam:\n    role:\n      arn:aws:iam::339712860018:role/service-role/ChatGPTProxy-role-4s3qtkll\n\nfunctions:\n  app:\n    handler: index.handler\n    events:\n      - http:\n          path: /chatgpt\n          method: post\n          cors: true\n",
    "command": [
      "deploy"
    ],
    "options": {},
    "error": null,
    "params": {},
    "machineId": "4ee3bfac00e92aedfac3f48fe983cad8",
    "accessKeyV2": "<REDACTED>",
    "accessKeyV1": "<REDACTED>",
    "orgId": "2bd57cea-9a1c-4f81-ba9a-59d072cdf263",
    "orgName": "whyjq",
    "userId": "llbnl061k0FcswqXwc",
    "dashboard": {
      "isEnabledForService": true,
      "requiredAuthentication": false,
      "orgFeaturesInUse": {
        "providers": true,
        "monitoring": false
      },
      "orgObservabilityIntegrations": null,
      "serviceAppId": "4SSVkPbzBXHSF3FkC2",
      "serviceProvider": {
        "accessKeyId": "<REDACTED>",
        "secretAccessKey": "<REDACTED>",
        "sessionToken": "<REDACTED>"
      },
      "instanceParameters": null
    },
    "userName": "whyjq",
    "subscription": null,
    "userEmail": "jy4421@nyu.edu",
    "serviceProviderAwsCredentials": "<REDACTED>",
    "serviceProviderAwsAccountId": "339712860018",
    "versionSf": "4.1.16",
    "serviceProviderAwsCfStackName": "chatgpt-api-dev",
    "serviceProviderAwsCfStackId": "arn:aws:cloudformation:us-east-1:339712860018:stack/chatgpt-api-dev/f20f66e0-4d9b-11ef-bad2-0affc0d0b717",
    "serviceProviderAwsCfStackCreated": "2024-07-29T11:16:04.882Z",
    "serviceProviderAwsCfStackUpdated": "2024-07-29T11:19:44.096Z",
    "serviceProviderAwsCfStackStatus": "UPDATE_COMPLETE",
    "serviceProviderAwsCfStackOutputs": [
      {
        "OutputKey": "AppLambdaFunctionQualifiedArn",
        "OutputValue": "arn:aws:lambda:us-east-1:339712860018:function:chatgpt-api-dev-app:1",
        "Description": "Current Lambda function version",
        "ExportName": "sls-chatgpt-api-dev-AppLambdaFunctionQualifiedArn"
      },
      {
        "OutputKey": "ServiceEndpoint",
        "OutputValue": "https://407t3dl5vd.execute-api.us-east-1.amazonaws.com/dev",
        "Description": "URL of the service endpoint",
        "ExportName": "sls-chatgpt-api-dev-ServiceEndpoint"
      },
      {
        "OutputKey": "ServerlessDeploymentBucketName",
        "OutputValue": "chatgpt-api-dev-serverlessdeploymentbucket-v51oew762hzm",
        "ExportName": "sls-chatgpt-api-dev-ServerlessDeploymentBucketName"
      }
    ]
  }
}